#
# This is a Shiny web application. 
#
# Librerias--------------------------------------------------------------
library(shiny)
library(shinythemes)
library(mongolite)
library(dplyr)
library(DT)
library(shinydashboard)
library(sqldf)
library(tidyverse)
library(lubridate)
library(shinycssloaders)
library(plotly)
library(highcharter)
library(tidyverse)
library(stringi)
library(stringr)
library(tidytext)
library(RColorBrewer)
library(emo)
library(writexl)
library(dygraphs)
library(xts)
require(visNetwork)

rm(list=ls()) #borramos del environment todos los elementos
options(scipen = 999)


# Cargamos bases MONGO --------------------------------------------------------------

url = "mongodb+srv://Userdb:password_user@cluster0.yjx8r.mongodb.net/test"

my_data_lista <- mongo(collection = "lista_politicxs", # Data Table
                         db = "configuration_db", # DataBase
                         url = url, 
                         verbose = TRUE)
data_politicxs <- my_data_lista$find(query = '{}')


my_data_crec <- mongo(collection = "data_crec", # Data Table
                 db = "configuration_db", # DataBase
                 url = url, 
                 verbose = TRUE)
data_crec <- my_data_crec$find(query = '{}')

my_data_colors <- mongo(collection = "data_colors", # Data Table
                 db = "configuration_db", # DataBase
                 url = url, 
                 verbose = TRUE)
data_colors <- my_data_colors$find(query = '{}')
unique(data_colors$color)

my_data_network <- mongo(collection = "data_network_mensual", # Data Table
                   db = "configuration_db", # DataBase
                   url = url, 
                   verbose = TRUE)
data_net <- my_data_network$find(query = '{}')
data_net <-data_net %>%
  filter(month_year > "2015-01-01")
data_net$month_year <- as.Date(data_net$month_year)

valueBox <- function(value, subtitle, icon, color) {
  div(class = "col-lg-3 col-md-6",
      div(class = "panel panel-primary",
          div(class = "panel-heading", style = paste0("background-color:", color),
              div(class = "row",
                  div(class = "col-xs-3",
                      icon(icon, "fa-3x")
                  ),
                  div(class = ("col-xs-9 text-right"),
                      div(style = ("font-size: 25px; font-weight: bold;"),
                          textOutput(value)
                      ),
                      div(subtitle)
                  )
              )
          ),
          div(class = "panel-footer",
              div(class = "clearfix")
          )
      )
  )
}

ui <- fluidPage(
  
#  tags$head(tags$style(".navbar{background-color:#c6c6c6;} .navbar{color: #C6C6C6;}")),
  # Application title
  tags$head(HTML("<title>Politic@s en Twitter</title>")), #Without company logo
  navbarPage(selected = "hola",id = "hola2f",
             title = div( img(src='https://github.com/Observatorio-de-Redes/politicosentwitter/raw/main/ShinyApp/www/politicos-en-redes.jpg',
                              style="margin-top: -14px; padding-right:10px;padding-bottom:10px", height = 60)),
             
    
         tabsetPanel(    # Descargá los tweets -----------------------------------------------------
             
             tabPanel(value = "hola", 
                      title = "Descargá", 
                      sidebarLayout(
                        sidebarPanel(
                          ### WIDGET 1 --> text
                          radioButtons(inputId='tipo_organismo', 
                                       label= h4('Seleccioná la Categoria:'), 
                                       choiceValues = unique(data_politicxs$Tipo_organismo_2), 
                                       choiceNames = c("Tod@s",
                                                       "Diputados/as Nacionales", 
                                                       "Poder Ejecutivo Nacional",
                                                       "Funcionario/as Provinciales",
                                                       "Otras figuras públicas",
                                                       "Senadores Nacionales"),
                                       selected = NULL), ### SELECCIONAR -
                          ### WIDGET 2 --> descargá
                          
                          uiOutput("seleccion_usuario"),
                          br(),
                          div(shiny::HTML("<h4>Descargá la data*:</h4> "),
                              downloadButton('downloadcsv',"CSV"), 
                              downloadButton('downloadxlsx',"XLSX" )),
                          a("*¿Qué información me trae esto?",target="_blank",href="https://github.com/Observatorio-de-Redes/politicosentwitter/raw/main/ShinyApp/www/descarga_timeline_usuarios.pdf"),
                          
                          br(), 
                          br(),
                          
                          div(shiny::HTML("<h4>Descargá la data por categoria**:</h4> "),
                              withSpinner(downloadButton('downloadcsv_all',"CSV"))),
                          helpText('**Puede tardar entre 5 y 15 min esta descarga. Se recomienda evitar utilizar la categoria "Tod@s" porque puede demorar màs tiempo.')
                          
                        ),
                        # Show a plot of the generated distribution
                        mainPanel(
                          dataTableOutput("data_base")
                        )        
                      )
             ),
             
             
             # Visualiza ---------------------------------------------------------------

             tabPanel("Visualizá",
                      sidebarLayout(
               sidebarPanel(
                 ### WIDGET 1 --> text


                 ### WIDGET 2 --> descargá


                 radioButtons(inputId='tipo_organismo2',
                              label=h4('Seleccioná la Categoria:'),
                              choiceValues = unique(data_politicxs$Tipo_organismo_2),
                              choiceNames = c("Tod@s",
                                              "Diputados/as Nacionales",
                                              "Poder Ejecutivo Nacional",
                                              "Funcionario/as Provinciales",
                                              "Otras figuras públicas",
                                              "Senadores Nacionales"),
                              selected = NULL), ### SELECCIONAR -


                 ### WIDGET 2 --> descargá
                 uiOutput("seleccion_usuario_2")
               ),
               mainPanel(

                 fluidRow(id="main-panel_1",
                          valueBox(value = "favs",
                                   subtitle = "cantidad de favs",
                                   icon = "heart",
                                   color = alpha(colour = "#bc57ff", alpha = 0.5 )),

                          valueBox(value = "statuses",
                                   subtitle = "cantidad de estados",
                                   icon = "retweet",
                                   color = alpha(colour = "#31C485", alpha = 0.5 )),

                          valueBox(value = "followers",
                                   subtitle = "cantidad de followers",
                                   icon = "user-friends",
                                   color = alpha(colour = "#79E7FB", alpha = 0.5 )),
                 ),
                 # Frontpage - tweet volume plots - start ----------------------------------
                 br(),
                 br(),
                 fluidRow(
                   tabBox(
                     width = 12,
                     tabPanel(
                       status = "primary",
                       title = "Cantidad de seguidos",
                       br(),
                       withSpinner(dygraphOutput("plot_friends", height='400px',width='100%'))
                     ),
                     tabPanel(
                       status = "success",
                       title = "Cantidad de seguidores",
                       br(),
                       withSpinner(dygraphOutput("plot_followers", height='400px',width='100%')),
                       div(align = "right",
                           shiny::HTML("<h4>Descargá la data*:</h4> "),
                           downloadButton('downloadcsv_fr_foll',"CSV"),
                           downloadButton('downloadxlsx_fr_foll',"XLSX" ),
                           br(),
                           a(align = "right",
                             "*¿Qué información me trae esto?",
                             target="_blank",
                             href="https://github.com/Observatorio-de-Redes/politicosentwitter/raw/main/ShinyApp/www/descarga_interacciones_usuaros.pdf")),
                     ), )) ) )
             ),
             
             
             tabPanel("Grafo", value = "hola3", 
                      sidebarLayout(
               sidebarPanel(
                 uiOutput("dateRange_net"),
                 br(),
                 checkboxGroupInput("checkGroup", label = h4("Seleccioná las Categorias: "), 
                                    choiceValues = unique(data_politicxs$Tipo_organismo_2), 
                                    choiceNames = c("Tod@s",
                                                    "Diputados/as Nacionales", 
                                                    "Poder Ejecutivo Nacional",
                                                    "Funcionario/as Provinciales",
                                                    "Otras figuras públicas",
                                                    "Senadores Nacionales"),
                                    selected = "TODXS"),
                 br(),
                 helpText(
                   tags$ul("Puntos a tener en consideración:",
                           tags$li("Esta nube muestra la interacción de los usuarios descargados en esta app durante el periodo seleccionado en base a retweets."),
                           tags$li("Entre más cercana al día de la fecha sea el periodo seleccionado, mayor será la cantidad de conexiones entre los usuarios, debido a reestricciones de descarga de la API de Twitter."),
                           tags$li("El tamaño de los nodos responde a la cantidad de retweets obtenidos por el usuario y el color al sector político al que pertenecen."),
                           tags$li("La actualización de esta nube es mensual -primero de cada mes- y los cambios observables en la misma también son mes a mes."),
                           #  style="text-align:justify;color:black;background-color:#c6c6c6;padding:15px;border-radius:10px"
                   ),
                   # style="text-align:justify;color:black;background-color:#c6c6c6;padding:15px;border-radius:10px"
                 )
               ),
               mainPanel(
                 withSpinner(visNetworkOutput("red_rt", height='700px',width='100%'))
               ) ))
         )
         
             )

)

server <- function(input, output) {

# primer tab --------------------------------------------------------------
df.filt <- reactive({
  df.filt=df[data_politicxs$Tipo_organismo_2==input$user_name,] 
  df.filt
})

output$seleccion_usuario <- renderUI({
  selectInput(inputId="user_name", h4("Seleccioná el usuario:"), 
              choices = sort(unique(data_politicxs[data_politicxs$Tipo_organismo_2 == input$tipo_organismo, 'screen_name'])), ### SELECCIONAR database
              selected = "SergioMassa"
  )
})


output$downloadcsv <- downloadHandler(
  filename = function(){paste0(input$user_name, "_timeline_database.csv")}, 
  content = function(fname){

    database <- data_politicxs[data_politicxs$screen_name==input$user_name,]
    write.csv(database, fname, row.names = F)
  }
)

output$downloadxlsx <- downloadHandler(
  filename = function(){paste0(input$user_name, "_timeline_database.xlsx")}, 
  content = function(fname){
    database <- database <- data_politicxs[data_politicxs$screen_name==input$user_name,]
    write_xlsx(database, fname)
    
  }
)

output$downloadcsv_all <- downloadHandler(
  filename = function(){paste0(input$tipo_organismo, "_timeline_database.csv")},
  content = function(fname){
    write.csv(data_politicxs, fname, row.names = F)
    
  }
)


####
output$data_base <- DT::renderDataTable({
  data_politicxs_table <- data_politicxs %>% 
    filter(data_politicxs$Tipo_organismo_2 == input$tipo_organismo) %>% 
    arrange(desc(as.numeric(followers_count))) %>%
    rename( "Usuario" = screen_name, 
            "Descripción" = description,
            "Organismo" = Tipo_organismo,
            "Imagen" =image, 
            "Seguidores"=followers_count, 
            "Nombre" =name) %>%
    select('Imagen', Usuario, Nombre, Descripción, 'Seguidores') 
  
  
  DT::datatable(data_politicxs_table, escape = FALSE) # HERE
})


# Segunda tab -------------------------------------------------------------

output$seleccion_usuario_2 <- renderUI({
  selectInput(inputId="user_name_2", h4("Seleccioná el usuario:"), 
              choices = sort(unique(data_politicxs[data_politicxs$Tipo_organismo_2 == input$tipo_organismo2, 'screen_name'])), ### SELECCIONAR database
              selected = "SergioMassa"
  )
})



### select user 2 2021-02-18

df.filt3 <- reactive({
  
  # data_crec_db_3 <- mongo(collection = "data_crec", # Data Table
  #                         db = "CREC_db", # DataBase
  #                         url = url_path, 
  #                         verbose = TRUE)
  # data_crec_3 <- data_crec_db_3$find(query = '{}')
  df.filt3 <- data_crec[data_crec$screen_name == input$user_name_2,]
  
  df.filt3
})


output$statuses <- renderText({ 
  df.filt2_rt <- df.filt3()
  as.numeric(df.filt3_foll[,"statuses_count"])
})

output$favs<- renderText({ 
  df.filt2_fav <- df.filt3()
  as.numeric(df.filt2_fav[, "favourites_count"])
  
})

output$followers<- renderText({ 
  df.filt3_foll <- df.filt3()
  paste0(df.filt3_foll[df.filt3_foll$date == max(as.Date(df.filt3_foll$date), na.rm=T), "followers_count"])
})

output$plot_friends <- renderDygraph({
  
  df3 <- df.filt3()  %>%
    filter(date >="2021-02-11" & screen_name == input$user_name_2) %>%
    select(date, friends_count) %>%
    mutate(Followers = as.numeric(as.character(friends_count)), 
           time = as.Date(as.character(date, "%Y-%m-%d")) ) %>%
    select(time, Followers) %>%
    arrange(time)
  
  don_3=xts( x=df3[,-1], order.by=df3$time)
  dygraph(don_3,  main = paste0("Evolución en la cantidad de Seguidos de @", input$user_name_2)) %>%
    dySeries("V1", label ="Followers" , color = "#df94ff", fillGraph = T) %>%
    dyOptions(maxNumberWidth = 999) %>%
    dyRangeSelector() 
  
})

output$plot_followers <- renderDygraph({
  
  df3 <- df.filt3()  %>%
    filter(date >="2021-02-11" & screen_name == input$user_name_2) %>%
    select(date, followers_count) %>%
    mutate(Followers = as.numeric(as.character(followers_count)), 
           time = as.Date(as.character(date, "%Y-%m-%d")) ) %>%
    select(time, Followers) %>%
    arrange(time)
  
  don_3=xts( x=df3[,-1], order.by=df3$time)
  dygraph(don_3,  main = paste0("Evolución en la cantidad de Seguidos de @", input$user_name_2)) %>%
    dySeries("V1", label ="Followers" , color = "#009fe3", fillGraph = T) %>%
    dyOptions(maxNumberWidth = 999) %>%
    dyRangeSelector() 
  
})

output$dateRange_net <- renderUI(
  dateRangeInput('dateRange3',
                 label = shiny::HTML('<h4> Seleccioná el periodo de tiempo: </h4> '),
                 start =  max(data_net$month_year, na.rm = T)-89,  end = max(data_net$month_year, na.rm = T),
                 min = min(data_net$month_year, na.rm = T), 
                 max = max(data_net$month_year, na.rm = T),
                 separator = " - ", format = "yyyy-mm-dd",
                 startview = 'year', language = 'es', weekstart = 1)
)


data_net_reactive <- reactive({
  lista <- unique(data_politicxs[data_politicxs$Tipo_organismo_2 %in% input$checkGroup, "user_id"])
  data_net_reactive <- data_net[((data_net$month_year > as.Date(input$dateRange3[1])) & 
                                   (data_net$month_year < as.Date(input$dateRange3[2]))) & 
                                  ((data_net$user_id %in% lista) &  (data_net$retweet_user_id %in% lista)), ]
  
})

output$red_rt <- renderVisNetwork({
  
  data_net_net <- data_net_reactive()
  
  nodes <-  gather(data_net_net, key = "tipo", value = "identificacion", 
                   c("user_id","retweet_user_id"))
  nodes <- sqldf("SELECT *, COUNT(*) as count FROM nodes 
               GROUP BY identificacion HAVING COUNT(*)")
  nodes <- nodes %>% select(identificacion, count)
  nodes <- nodes[!is.na(nodes$identificacion),]
  nodes$id_2 = nodes$identificacion
  nodes <- nodes %>% rename(id = identificacion, label = id_2, value = count)
  data_colors$id <- as.character(as.numeric(data_colors$id))
  # unimos con data colors
  nodes <- left_join( data_colors, nodes, by = "id")  %>% 
    select(id, value, screen_name, color) %>%
    rename(label=screen_name) 
  
  nodes[ is.na(nodes$value ), "value"] <- 0
  
  # armamos los edges -------------------------------------
  data_net_net$value <- as.numeric(as.character(data_net_net$value))
  links <- data_net_net %>% 
    filter(user_id %in% data_colors$id &
             retweet_user_id %in% data_colors$id ) %>%
    group_by(retweet_user_id, user_id) %>% 
    summarise(cantidad = sum(value)) %>%
    rename(from = user_id,
           to = retweet_user_id,
           friendship = cantidad)
  links <- links[!is.na(links$from),]
  links <- links[!is.na(links$friendship),]
  links <- links[!is.na(links$to),]
  
  
  visNetwork(nodes, links, main = list(text = paste0('Interacción en Twitter desde el "',day(as.Date(input$dateRange3[1])),'-',month(as.Date(input$dateRange3[1])),'-', year(as.Date(input$dateRange3[1])),
                                                     '" al "', day(as.Date(input$dateRange3[2])),'-',month(as.Date(input$dateRange3[2])),'-', year(as.Date(input$dateRange3[2])), '"'), 
                                       style = "font-family:Arial;color:#15202b;font-size:20px;text-align:center;")) %>%
    visIgraphLayout() %>%
    visNodes(
      shape = "dot",
      shadow = list(enabled = TRUE, size = 10)
    ) %>%
    visEdges(
      shadow = FALSE,
      color = list(color = "#C4C4C4", highlight = "#C4C4C4"), length = 1000
    ) %>%
    visOptions(highlightNearest = list(enabled = T, degree = 1,
                                       hover = T)) %>%
    visPhysics(enabled = F, solver = "repulsion", repulsion = list(nodeDistance = 1000)) %>%
    visInteraction(navigationButtons = TRUE)
})

}

shinyApp(ui=ui, server=server)

